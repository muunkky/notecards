import { describe, it, expect } from 'vitest'
import type { 
  User, 
  Deck, 
  Card, 
  OrderSnapshot,
  DeckData,
  CardData,
  OrderSnapshotData,
  UserData,
  ApiResponse,
  ValidationError,
  FormState
} from '../../types'
import { 
  OrderDirection,
  CardSortBy,
  DeckSortBy 
} from '../../types'

describe('Type Definitions', () => {
  describe('User Interface', () => {
    it('should define User interface correctly', () => {
      const user: User = {
        uid: 'test-uid',
        email: 'test@example.com',
        displayName: 'Test User',
        photoURL: 'https://example.com/photo.jpg',
        createdAt: new Date()
      }

      expect(user.uid).toBe('test-uid')
      expect(user.email).toBe('test@example.com')
      expect(user.displayName).toBe('Test User')
      expect(user.photoURL).toBe('https://example.com/photo.jpg')
      expect(user.createdAt).toBeInstanceOf(Date)
    })

    it('should allow null values for optional User fields', () => {
      const user: User = {
        uid: 'test-uid',
        email: null,
        displayName: null,
        photoURL: null,
        createdAt: new Date()
      }

      expect(user.email).toBeNull()
      expect(user.displayName).toBeNull()
      expect(user.photoURL).toBeNull()
    })
  })

  describe('Deck Interface', () => {
    it('should define Deck interface correctly', () => {
      const deck: Deck = {
        id: 'deck-123',
        title: 'Test Deck',
        ownerId: 'user-123',
        createdAt: new Date(),
        updatedAt: new Date(),
        cardCount: 5
      }

      expect(deck.id).toBe('deck-123')
      expect(deck.title).toBe('Test Deck')
      expect(deck.ownerId).toBe('user-123')
      expect(deck.createdAt).toBeInstanceOf(Date)
      expect(deck.updatedAt).toBeInstanceOf(Date)
      expect(deck.cardCount).toBe(5)
    })

    it('should allow optional cardCount field', () => {
      const deck: Deck = {
        id: 'deck-123',
        title: 'Test Deck',
        ownerId: 'user-123',
        createdAt: new Date(),
        updatedAt: new Date()
      }

      expect(deck.cardCount).toBeUndefined()
    })
  })

  describe('Card Interface', () => {
    it('should define Card interface correctly', () => {
      const card: Card = {
        id: 'card-123',
        deckId: 'deck-123',
        title: 'Test Card',
        body: 'Test card body',
        orderIndex: 0,
        createdAt: new Date(),
        updatedAt: new Date()
      }

      expect(card.id).toBe('card-123')
      expect(card.deckId).toBe('deck-123')
      expect(card.title).toBe('Test Card')
      expect(card.body).toBe('Test card body')
      expect(card.orderIndex).toBe(0)
      expect(card.createdAt).toBeInstanceOf(Date)
      expect(card.updatedAt).toBeInstanceOf(Date)
    })
  })

  describe('OrderSnapshot Interface', () => {
    it('should define OrderSnapshot interface correctly', () => {
      const snapshot: OrderSnapshot = {
        id: 'snapshot-123',
        deckId: 'deck-123',
        name: 'Test Snapshot',
        cardOrder: ['card-1', 'card-2', 'card-3'],
        createdAt: new Date()
      }

      expect(snapshot.id).toBe('snapshot-123')
      expect(snapshot.deckId).toBe('deck-123')
      expect(snapshot.name).toBe('Test Snapshot')
      expect(snapshot.cardOrder).toEqual(['card-1', 'card-2', 'card-3'])
      expect(snapshot.createdAt).toBeInstanceOf(Date)
    })
  })

  describe('Data Types (Firestore)', () => {
    it('should define DeckData without id field', () => {
      const deckData: DeckData = {
        title: 'Test Deck',
        ownerId: 'user-123',
        createdAt: new Date(),
        updatedAt: new Date()
      }

      // Should not have id field (auto-generated by Firestore)
      expect('id' in deckData).toBe(false)
      expect(deckData.title).toBe('Test Deck')
      expect(deckData.ownerId).toBe('user-123')
    })

    it('should define CardData without id and deckId fields', () => {
      const cardData: CardData = {
        title: 'Test Card',
        body: 'Test body',
        orderIndex: 0,
        createdAt: new Date(),
        updatedAt: new Date()
      }

      // Should not have id or deckId fields
      expect('id' in cardData).toBe(false)
      expect('deckId' in cardData).toBe(false)
      expect(cardData.title).toBe('Test Card')
      expect(cardData.body).toBe('Test body')
      expect(cardData.orderIndex).toBe(0)
    })

    it('should define OrderSnapshotData without id and deckId fields', () => {
      const snapshotData: OrderSnapshotData = {
        name: 'Test Snapshot',
        cardOrder: ['card-1', 'card-2'],
        createdAt: new Date()
      }

      expect('id' in snapshotData).toBe(false)
      expect('deckId' in snapshotData).toBe(false)
      expect(snapshotData.name).toBe('Test Snapshot')
      expect(snapshotData.cardOrder).toEqual(['card-1', 'card-2'])
    })

    it('should define UserData correctly', () => {
      const userData: UserData = {
        email: 'test@example.com',
        displayName: 'Test User',
        createdAt: new Date()
      }

      expect(userData.email).toBe('test@example.com')
      expect(userData.displayName).toBe('Test User')
      expect(userData.createdAt).toBeInstanceOf(Date)
    })
  })

  describe('API Response Types', () => {
    it('should define successful ApiResponse correctly', () => {
      const successResponse: ApiResponse<string> = {
        success: true,
        data: 'test-data'
      }

      expect(successResponse.success).toBe(true)
      expect(successResponse.data).toBe('test-data')
      expect(successResponse.error).toBeUndefined()
    })

    it('should define error ApiResponse correctly', () => {
      const errorResponse: ApiResponse<never> = {
        success: false,
        error: {
          code: 'test-error',
          message: 'Test error message'
        }
      }

      expect(errorResponse.success).toBe(false)
      expect(errorResponse.data).toBeUndefined()
      expect(errorResponse.error?.code).toBe('test-error')
      expect(errorResponse.error?.message).toBe('Test error message')
    })
  })

  describe('Form and Validation Types', () => {
    it('should define ValidationError correctly', () => {
      const validationError: ValidationError = {
        field: 'title',
        message: 'Title is required'
      }

      expect(validationError.field).toBe('title')
      expect(validationError.message).toBe('Title is required')
    })

    it('should define FormState correctly', () => {
      const formState: FormState<{ title: string }> = {
        values: { title: 'Test Title' },
        errors: [{ field: 'title', message: 'Title too short' }],
        isSubmitting: false,
        isDirty: true
      }

      expect(formState.values.title).toBe('Test Title')
      expect(formState.errors).toHaveLength(1)
      expect(formState.errors[0].field).toBe('title')
      expect(formState.isSubmitting).toBe(false)
      expect(formState.isDirty).toBe(true)
    })
  })

  describe('Enum Types', () => {
    it('should define OrderDirection enum correctly', () => {
      expect(OrderDirection.ASC).toBe('asc')
      expect(OrderDirection.DESC).toBe('desc')
    })

    it('should define CardSortBy enum correctly', () => {
      expect(CardSortBy.ORDER_INDEX).toBe('orderIndex')
      expect(CardSortBy.TITLE).toBe('title')
      expect(CardSortBy.CREATED_AT).toBe('createdAt')
      expect(CardSortBy.UPDATED_AT).toBe('updatedAt')
    })

    it('should define DeckSortBy enum correctly', () => {
      expect(DeckSortBy.TITLE).toBe('title')
      expect(DeckSortBy.CREATED_AT).toBe('createdAt')
      expect(DeckSortBy.UPDATED_AT).toBe('updatedAt')
      expect(DeckSortBy.CARD_COUNT).toBe('cardCount')
    })
  })
})
